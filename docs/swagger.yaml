basePath: /api/v1
definitions:
  main.createCustomerPayload:
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        maxLength: 20
        minLength: 3
        type: string
      last_name:
        example: Doe
        maxLength: 20
        minLength: 3
        type: string
      store_id:
        example: 1
        minimum: 1
        type: integer
    required:
    - email
    - first_name
    - last_name
    - store_id
    type: object
  main.healthCheckData:
    properties:
      environment:
        type: string
      status:
        type: string
      version:
        type: string
    type: object
  main.healthCheckResponse:
    properties:
      data:
        $ref: '#/definitions/main.healthCheckData'
    type: object
  main.moviesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/store.Movie'
        type: array
    type: object
  main.registerUserPayload:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123
        maxLength: 72
        minLength: 8
        type: string
      username:
        example: john.doe
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.rentalResponse:
    properties:
      data:
        $ref: '#/definitions/store.Rental'
    type: object
  main.signInPayload:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123
        maxLength: 72
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  main.signInResponse:
    properties:
      data:
        type: string
    type: object
  store.Movie:
    properties:
      description:
        type: string
      id:
        type: integer
      release_year:
        type: integer
      title:
        type: string
    type: object
  store.Rental:
    properties:
      id:
        type: integer
      rental_date:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Examasdasdasdasdasdawdasple API
  version: "1.0"
paths:
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.registerUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register user
      tags:
      - 2. Auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Sign in a user
      parameters:
      - description: Sign in user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.signInPayload'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/main.signInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Sign in user
      tags:
      - 2. Auth
  /customers:
    post:
      consumes:
      - application/json
      description: Create a new customer for store by admin user
      parameters:
      - description: Create customer request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.createCustomerPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create customer
      tags:
      - 3. Customers
  /health:
    get:
      consumes:
      - application/json
      description: Check if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.healthCheckResponse'
      summary: Health check
      tags:
      - 1. Health
  /movies:
    get:
      consumes:
      - application/json
      description: Get all movies
      parameters:
      - default: 20
        in: query
        maximum: 20
        minimum: 1
        name: limit
        type: integer
      - default: 0
        in: query
        minimum: 0
        name: offset
        type: integer
      - in: query
        maxLength: 100
        name: search
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.moviesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get movies
      tags:
      - 5. Movies
  /rentals/{id}:
    get:
      consumes:
      - application/json
      description: Get a rental by ID
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.rentalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get rental by ID
      tags:
      - 4. Rentals
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
